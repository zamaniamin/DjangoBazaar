"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.1/ref/settings/

Quick-start development settings - unsuitable for production, see:
https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

Database, see:
https://docs.djangoproject.com/en/5.1/ref/settings/#databases

Password validation, see:
https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

Internationalization, see:
https://docs.djangoproject.com/en/5.1/topics/i18n/

Static files (CSS, JavaScript, Images), see:
https://docs.djangoproject.com/en/5.1/howto/static-files/

Default primary key field type, see:
https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from config.env_loader import EnvironmentVariables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
env = EnvironmentVariables(BASE_DIR)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.DJANGO_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.DEBUG

ALLOWED_HOSTS = env.ALLOWED_HOSTS

# ------------------------------
# --- Application definition ---
# ------------------------------

INSTALLED_APPS = [
    # "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # External Packages
    "django_filters",
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    # Made by me
    "apps.core",
    "apps.shop",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Site Framework
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# ----------------
# --- Database ---
# ----------------

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env.DATABASE_NAME,
        "USER": env.DATABASE_USER,
        "PASSWORD": env.DATABASE_PASSWORD,
        "HOST": env.DATABASE_HOST,
        "PORT": env.DATABASE_PORT,
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# ---------------------------
# --- Password validation ---
# ---------------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# ----------------------------
# --- Internationalization ---
# ----------------------------

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ----------------------------------------------
# --- Static files (CSS, JavaScript, Images) ---
# ----------------------------------------------

STATIC_URL = env.STATIC_URL
STATIC_ROOT = env.STATIC_ROOT

# --------------------------------------
# --- Default primary key field type ---
# --------------------------------------

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "core.User"

# ----------------------
# --- Site Framework ---
# ----------------------

SITE_ID = 1

# -------------
# --- Email ---
# -------------

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = env.EMAIL_HOST
    EMAIL_USE_SSL = env.EMAIL_USE_SSL
    EMAIL_PORT = env.EMAIL_PORT
    EMAIL_HOST_USER = env.EMAIL_HOST_USER
    EMAIL_HOST_PASSWORD = env.EMAIL_HOST_PASSWORD

# ----------------------
# --- REST FRAMEWORK ---
# ----------------------

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "COERCE_DECIMAL_TO_STRING": False,
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # "PAGE_SIZE": 10,
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Django Bazaar",
    "DESCRIPTION": """An open-source e-commerce platform, offering a versatile and scalable solution for creating 
    online marketplaces. """,
    "VERSION": "0.3.64",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,  # file upload representation in Swagger UI
    # UPLOADED_FILES_USE_URL
}

# -----------
# --- JWT ---
# -----------

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "UPDATE_LAST_LOGIN": True,
}

# -----------
# --- OTP ---
# -----------

OTP_SECRET_KEY = env.OTP_SECRET_KEY
OTP_EXPIRE_SECONDS = env.OTP_EXPIRE_SECONDS

# -------------
# --- Redis ---
# -------------

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": env.REDIS_URL,
        "TIMEOUT": 60 * 15,  # in seconds: 60 * 15 (15 minutes)
        # "TIMEOUT": None,  # cache keys never expire, the default value is 5 minutes (300 seconds)
        # "TIMEOUT": 0,  # expire the cache immediately (donâ€™t cache)
    }
}

# -------------
# --- Media ---
# -------------

MEDIA_URL = env.MEDIA_URL
MEDIA_ROOT = env.MEDIA_ROOT

# ------------
# --- CORS ---
# ------------

CORS_ALLOWED_ORIGINS = env.CORS_ALLOWED_ORIGINS

# ----------------------------
# --- Django Debug Toolbar ---
# ----------------------------

# Debug Toolbar is displayed if our IP address is listed in INTERNAL_IPS,
# in our case, only if we are in DEBUG mode
if DEBUG:
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

# Only enable the toolbar when we're in debug mode, and we're
# not running tests. Django will change DEBUG to be False for
# tests, so we can't rely on DEBUG alone.
ENABLE_DEBUG_TOOLBAR = DEBUG and "test" not in sys.argv
if ENABLE_DEBUG_TOOLBAR:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]
    # Customize the config to support turbo and htmx boosting.
    DEBUG_TOOLBAR_CONFIG = {"ROOT_TAG_EXTRA_ATTRS": "data-turbo-permanent hx-preserve"}

# ----------------------
# --- Django Testing ---
# ----------------------

# faster hashing algorithm, reduce tests time.
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.MD5PasswordHasher",
]
